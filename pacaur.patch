diff --git a/pacaur.py b/pacaur.py
index 9e22714..e85e91e 100644
--- a/pacaur.py
+++ b/pacaur.py
@@ -2,12 +2,14 @@ import sys, os, subprocess, dotbot, time
 from enum import Enum
 
 class PkgStatus(Enum):
+    AUR_UP_TO_DATE = 'Up to date'
     UP_TO_DATE = 'Up to date'
     INSTALLED = 'Installed'
     NOT_FOUND = 'Not found'
     ERROR = "Errors occurred"
     BUILD_FAIL = "Build failure"
-    NOT_SURE = 'Could not determine'
+    NOT_SURE_FAIL = 'Non-zero exit code'
+    NOT_SURE_SUCCESS = 'Could not determine'
 
 class Pacaur(dotbot.Plugin):
     _directive = 'pacaur'
@@ -17,6 +19,7 @@ class Pacaur(dotbot.Plugin):
         self._context = context
         self._strings = {}
         self._strings[PkgStatus.UP_TO_DATE] = "nothing to do"
+        self._strings[PkgStatus.AUR_UP_TO_DATE] = "up-to-date -- skipping"
         self._strings[PkgStatus.INSTALLED] = "Total Installed Size"
         self._strings[PkgStatus.NOT_FOUND] = "no results found"
         self._strings[PkgStatus.BUILD_FAIL] = "failed to build"
@@ -35,7 +38,12 @@ class Pacaur(dotbot.Plugin):
     def _process_packages(self, packages):
         defaults = self._context.defaults().get('pacaur', {})
         results = {}
-        successful = [PkgStatus.UP_TO_DATE, PkgStatus.INSTALLED]
+        successful = [
+            PkgStatus.AUR_UP_TO_DATE,
+            PkgStatus.UP_TO_DATE,
+            PkgStatus.INSTALLED,
+            PkgStatus.NOT_SURE_SUCCESS
+        ]
 
         for pkg in packages:
             result = self._install(pkg)
@@ -85,8 +93,16 @@ class Pacaur(dotbot.Plugin):
             if out.find(self._strings[status]) >= 0:
                 return status
 
-        self._log.warn("Could not determine what happened with package {}".format(pkg))
-        return PkgStatus.NOT_SURE
+        process.communicate()[0] # wait for process to exit and set returncode
+        returncode = process.returncode
+
+        if returncode > 0:
+            self._log.warn("Installtion of package '{}' failed with exit code {}".format(pkg, returncode))
+            return PkgStatus.NOT_SURE_FAIL
+        else:
+            self._log.warn("Could not determine what happened with package '{}'".format(pkg))
+            return PkgStatus.NOT_SURE_SUCCESS
+            
 
     def _bootstrap_pacaur(self):
         dir_path = os.path.dirname(os.path.realpath(__file__))
